import "oaidl.idl";
import "ocidl.idl";

[
  uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2B0),
  version(1.0)
]
library HTTPD
{
  //////////////////////////////////////////////////////////////////////////
  //
  // Forward declares
  //
  interface IServer;
  interface ISite;
  interface ISites;
  interface IRequest;
  interface IResponse;
  interface IResolver;
  interface IHandler;

  //////////////////////////////////////////////////////////////////////////
  //
  // Enumerations
  //
  typedef enum 
  {
    HTTP_1_0 = 10,
    HTTP_1_1 = 11
  } 
  HttpVersion;

  //////////////////////////////////////////////////////////////////////////
  //
  // IServer interface
  //
  [
    uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2B1),
    version(1.0), dual, oleautomation
  ]
  interface IServer : IDispatch
  {
    [helpstring("Get logfile"), propget]
    HRESULT Logfile([out, retval] BSTR* filename);

    [helpstring("Set logfile"), propput]
    HRESULT Logfile([in] BSTR filename);

    [helpstring("Retrieve sites collection"), propget]
    HRESULT Sites([out, retval] ISites** sites);

    [helpstring("Start the server")]
    HRESULT Start();

    [helpstring("Stop the server")]
    HRESULT Stop();
  }

  //
  // Server class
  //
  [
    uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2B2),
    version(1.0),
    appobject
  ]
  coclass Server
  {
    dispinterface IServer;
  }

  //////////////////////////////////////////////////////////////////////////
  //
  // ISite interface
  //
  [
    uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2B3),
    version(1.0), dual, oleautomation
  ]
  interface ISite : IDispatch
  {
    [helpstring("Site name"), propget]
    HRESULT Name([out, retval] BSTR* name);

    [helpstring("Site root"), propget]
    HRESULT Root([out, retval] BSTR* root);

    [helpstring("Site root"), propput]
    HRESULT Root([in] BSTR root);

    [helpstring("Add alias for site")]
    HRESULT AddAlias([in]BSTR name, [in] int port);

    [helpstring("Add a mime type to the site")]
    HRESULT AddMimeType([in] BSTR extension, 
                        [in] BSTR mimetype, 
                        [in, optional] VARIANT handler);

    [helpstring("Add a default document to the site")]
    HRESULT AddDefaultDocument([in] BSTR document);
  }

  //
  // Site class
  //
  [
    uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2B4),
    version(1.0)
  ]
  coclass Site
  {
    dispinterface ISite;
  }

  //////////////////////////////////////////////////////////////////////////
  //
  // ISites interface
  //
  [
    uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2B5),
    version(1.0), dual, oleautomation
  ]
  interface ISites : IDispatch
  {
    [helpstring("Retrieve the enumerator"), id(DISPID_NEWENUM), propget]
    HRESULT _NewEnum([out, retval] IUnknown** ppUnk);

    [helpstring("Retrieve a site item"), id(DISPID_VALUE), propget]
    HRESULT Item([in] VARIANT index, [out, retval] ISite** pSite);

    [helpstring("Retrieve the number of sites"), propget]
    HRESULT Count([out, retval] long* pVal);

    [helpstring("Add a new site")]
    HRESULT Add([in] BSTR name, [out, retval] ISite** pSite);
  }

  //
  // Sites EnumVARIANT
  //
 	[
		uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2B6),
		hidden,
		helpstring("SitesVARIANT Class")
	]
	coclass SitesVARIANT
	{
		[default] interface IEnumVARIANT;
	};

  //////////////////////////////////////////////////////////////////////////
  //
  // IRequest interface
  //
  [
    uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2BA),
    version(1.0), dual, oleautomation
  ]
  interface IRequest : IDispatch
  {
  }

  //
  // Request class
  //
  [
    uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2BB),
    version(1.0)
  ]
  coclass Request
  {
    dispinterface IRequest;
  }

  
  //////////////////////////////////////////////////////////////////////////
  //
  // Response header
  //
  [
    uuid(0D7284F1-8971-47f5-A1B3-CC9F6D5BE890),
    helpstring("Response header item")
  ]
  interface IResponseHeader : IDispatch
  {
    //
    // Header name
    //
    [helpstring("Retrieve header name"), propget]
    HRESULT Name([out, retval] BSTR* name);

    //
    // Header value
    //
    [helpstring("Retrieve header value"), propget, id(DISPID_VALUE)]
    HRESULT Value([out, retval] BSTR* value);
    [helpstring("Set header value"), propput, id(DISPID_VALUE)]
    HRESULT Value([in] BSTR value);
  }

  //////////////////////////////////////////////////////////////////////////
  //
  // Response headers collection
  //

  //
  // Interface
  //
  [
    uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2B8),
    version(1.0), dual, oleautomation
  ]
  interface IResponseHeaders : IDispatch
  {
    [helpstring("Retrieve the enumerator"), id(DISPID_NEWENUM), propget]
    HRESULT _NewEnum([out, retval] IUnknown** ppUnk);

    [helpstring("Retrieve a header"), id(DISPID_VALUE), propget]
    HRESULT Item([in] VARIANT index, [out, retval] IResponseHeader** pHeader);

    [helpstring("Retrieve the number of headers"), propget]
    HRESULT Count([out, retval] long* pVal);
  }

  //
  // Enumerator class
  //
  [
		uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2B7),
		hidden,
		helpstring("ResponseHeadersVARIANT Class")
	]
	coclass ResponseHeadersVARIANT
	{
		interface IEnumVARIANT;
	};

  //////////////////////////////////////////////////////////////////////////
  //
  // IResponse interface
  //
  [
    uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2BC),
    version(1.0), dual, oleautomation
  ]
  interface IResponse : IDispatch
  {
    //
    // Version
    //
    [helpstring("Retrieve HTTP version"), propget]
    HRESULT Version([out, retval] HttpVersion* version);

    //
    // Status
    //
    [helpstring("Status"), propget]
    HRESULT Status([out, retval] BSTR* status);
    [helpstring("Status"), propput]
    HRESULT Status([in] BSTR status);

    //
    // Response buffering
    //
    [helpstring("Get buffering state"), propget]
    HRESULT Buffer([out, retval] VARIANT_BOOL* result);
    [helpstring("Set buffering state"), propput]
    HRESULT Buffer([in] VARIANT_BOOL value);

    //
    // Response headers
    //
    [helpstring("Retrieve a response header")]
    HRESULT GetHeader([in] BSTR name, [out, retval] BSTR* value);
    [helpstring("Set a response header")]
    HRESULT SetHeader([in] BSTR name, [in] BSTR value);

    //
    // Send response headers
    //
    [helpstring("Send response headers. Fails when headers have already been sent.")]
    HRESULT SendHeaders([out, retval] VARIANT_BOOL* result);

    //
    // Send error
    //
    [helpstring("Send error response. Fails when headers have already been sent.")]
    HRESULT SendError([in] int error, [out, retval] VARIANT_BOOL* result);

    //
    // Send response data
    //
    [helpstring("Send response data")]
    HRESULT Send([in] void* data, [in] int length);

    //
    // Flush headers and available data
    //
    [helpstring("Flush output buffer")]
    HRESULT Flush();

    //
    // Finish the request
    //
    [helpstring("Finish the request")]
    HRESULT Finish();
  }

  //
  // Response class
  //
  [
    uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2BD),
    version(1.0)
  ]
  coclass Response
  {
    dispinterface IResponse;
  }

  //////////////////////////////////////////////////////////////////////////
  //
  // IResolver interface
  //
  [
    uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2BE),
    version(1.0)
  ]
  interface IResolver : IUnknown
  {
    [helpstring("Resolve a request")]
    HRESULT Resolve([in] IRequest* request, [in] BSTR uri, [out, retval] IHandler** handler);
  }
  
  //////////////////////////////////////////////////////////////////////////
  //
  // IHandler interface
  //
  [
    uuid(F1AF728E-F8BA-481e-B567-84FDFA05B2BF),
    version(1.0)
  ]
  interface IHandler : IUnknown
  {
    [helpstring("Handle a request")]
    HRESULT Handle([in] IRequest* request, [in] IResponse* response);
  }

}
